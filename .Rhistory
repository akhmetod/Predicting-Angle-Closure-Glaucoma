# dput(model, "0-model-rforest.R")
yHat <- predict(model, newx=x.te, type="response")
roc <- roc(data.te[,1]~yHat, data.te, plot=T)
roc$auc
model$beta
model$beta
roc$auc
# Clearing memory, loading package, reading the data
rm(list=ls())
library(randomForest)
library(pROC)
library(ggplot2)
data.tr <- dget("0-training-data.r")
data.te <- dget("0-testing-data.r")
# -------------------- Choosing number of trees -------------------- #
# Initializing the parameter tuning
nIter <- 100
nTree <- seq(30,1200,30)
auc <- matrix(NA, nIter, length(nTree))
# Fitting the final model, getting the prediction and testing the model
model  <- randomForest(y~., data=data.tr, ntree=500)
dput(model, "0-model-rforest.R")
# Clearing memory, loading package, reading the data
rm(list=ls())
library(glmnet)
library(pROC)
library(ggplot2)
data.tr <- dget("0-training-data.r")
data.te <- dget("0-testing-data.r")
y.te <- data.te[,1]
x.te <- data.matrix(data.te[,-1])
y.tr <- data.tr[,1]
x.tr <- data.matrix(data.tr[,-1])
y.te <- data.te[,1]
x.te <- data.matrix(data.te[,-1])
# Fitting the final model, getting the prediction and testing the model
model <- glmnet(x=x.tr, y=y.tr, family = "binomial", alpha=0, lambda=0.2482957578)
yHat <- predict(model, newx=x.te, type="response")
yHat <- predict(model, newx=x.te, type="response")
roc <- roc(data.te[data.index,1]~yHat, data.tr[-data.index,])
roc <- roc(data.te[data.index,1]~yHat, data.te)
yHat <- predict(model, newx=x.te, type="response")
roc <- roc(data.te[,1]~yHat, data.te)
roc
roc$auc
model <- glmnet(x=x.tr, y=y.tr, family = "binomial", alpha=0, lambda=0.2482957578)
dput(model, "0-model-logistic.R")
# Clearing memory, loading package, reading the data
rm(list=ls())
library(glmnet)
library(pROC)
library(ggplot2)
data.tr <- dget("0-training-data.r")
data.te <- dget("0-testing-data.r")
# -------------------- Testing model -------------------- #
y.tr <- data.tr[,1]
x.tr <- data.matrix(data.tr[,-1])
y.te <- data.te[,1]
x.te <- data.matrix(data.te[,-1])
# Fitting the final model, getting the prediction and testing the model
model <- glmnet(x=x.tr, y=y.tr, family = "binomial", alpha=0, lambda=0.2482957578)
roc <- roc(data.te[,1]~yHat, data.te, plot=T)
yHat <- predict(model, newx=x.te, type="response")
roc <- roc(data.te[,1]~yHat, data.te, plot=T)
# Clearing memory, loading package, reading the data
rm(list=ls())
library(ada)
library(pROC)
library(ggplot2)
data.tr <- dget("0-training-data.r")
data.te <- dget("0-testing-data.r")
model  <- ada(y~., data=data.tr, loss="logistic", type="discrete", iter=50, nu=0.0631)
# dput(model, "0-model-adaboost.R")
yHat <- predict(model, data.te, type="prob")
roc <- roc(data.te[,1]~yHat[,1], data.te, plot=T)
gamma <- 10^seq(-3,1,(1+3)/nIter)
cost <- 10^seq(-5,-1,(5-1)/nIter)
gamma <- 10^seq(-3,1,0.2)
gamma
cost <- 10^seq(-5,-1,0.2)
cost
gamma <- 10^seq(-3,1,0.25)
cost <- 10^seq(-5,-1,0.25)
gamma
cost
my.auc <- array(0, dim=c(10,17,17,)
my.auc <- array(0, dim=c(10,17,17)
my.auc <- array(0, dim=c(10,17,17)
my.auc <- array(0, dim=c(10,17,17))
# -------------------- Choosing gamma -------------------- #
my.auc <- array(0, dim=c(10,17,17))
my.auc
# Clearing memory, loading package, reading the data
rm(list=ls())
library(e1071)
library(pROC)
library(ggplot2)
data.tr <- dget("0-training-data.r")
data.te <- dget("0-testing-data.r")
# Initializing values
nIter <- 5
gamma <- 10^seq(-3,1,1)
cost <- 10^seq(-5,-1,1)
my.auc <- array(0, dim=c(nIter,length(gamma),length(cost)))
for(g in gamma) { for(c in cost) {
}}
# Clearing memory, loading package, reading the data
rm(list=ls())
library(e1071)
library(pROC)
library(ggplot2)
data.tr <- dget("0-training-data.r")
data.te <- dget("0-testing-data.r")
# Initializing values
nIter <- 5
gamma <- 10^seq(-3,1,1)
cost <- 10^seq(-5,-1,1)
my.auc <- array(0, dim=c(nIter,length(gamma),length(cost)))
for(iter in 1:nIter){
# Initializing the cross validation
data.index <- sample(nrow(data.tr))[1:round(nrow(data.tr)/10)]
for(g in gamma) { for(c in cost) {
model  <- svm(y~., data=data.tr[-data.index,], gamma=g, cost=c, probability=TRUE)
yHat <- predict(model, data.tr[data.index,], probability=TRUE)
yHat <- attr(yHat, "probabilities")
roc <- roc(data.tr[data.index,1]~yHat, data.tr[data.index,])
my.auc[iter,which(gamma==g),which(cost==c)] <- auc(roc)
}}
print(iter)
}
install.packages("e1071")
# Clearing memory, loading package, reading the data
rm(list=ls())
library(e1071)
library(pROC)
library(ggplot2)
data.tr <- dget("0-training-data.r")
data.te <- dget("0-testing-data.r")
# Initializing values
nIter <- 5
gamma <- 10^seq(-3,1,1)
cost <- 10^seq(-5,-1,1)
my.auc <- array(0, dim=c(nIter,length(gamma),length(cost)))
# -------------------- Choosing gamma -------------------- #
for(iter in 1:nIter){
# Initializing the cross validation
data.index <- sample(nrow(data.tr))[1:round(nrow(data.tr)/10)]
for(g in gamma) { for(c in cost) {
model  <- svm(y~., data=data.tr[-data.index,], gamma=g, cost=c, probability=TRUE)
yHat <- predict(model, data.tr[data.index,], probability=TRUE)
yHat <- attr(yHat, "probabilities")
roc <- roc(data.tr[data.index,1]~yHat, data.tr[data.index,])
my.auc[iter,which(gamma==g),which(cost==c)] <- auc(roc)
}}
print(iter)
}
data.index <- sample(nrow(data.tr))[1:round(nrow(data.tr)/10)]
data.index
model  <- svm(y~., data=data.tr[-data.index,], gamma=g, cost=c, probability=TRUE)
yHat <- predict(model, data.tr[data.index,], probability=TRUE)
yHat
yHat <- attr(yHat, "probabilities")
yHat
roc <- roc(data.tr[data.index,1]~yHat[,1], data.tr[data.index,])
roc
my.auc[iter,which(gamma==g),which(cost==c)] <- auc(roc)
# Clearing memory, loading package, reading the data
rm(list=ls())
library(e1071)
library(pROC)
library(ggplot2)
data.tr <- dget("0-training-data.r")
data.te <- dget("0-testing-data.r")
# Initializing values
nIter <- 5
gamma <- 10^seq(-3,1,1)
cost <- 10^seq(-5,-1,1)
my.auc <- array(0, dim=c(nIter,length(gamma),length(cost)))
# -------------------- Choosing gamma -------------------- #
for(iter in 1:nIter){
# Initializing the cross validation
data.index <- sample(nrow(data.tr))[1:round(nrow(data.tr)/10)]
for(g in gamma) { for(c in cost) {
model  <- svm(y~., data=data.tr[-data.index,], gamma=g, cost=c, probability=TRUE)
yHat <- predict(model, data.tr[data.index,], probability=TRUE)
yHat <- attr(yHat, "probabilities")
roc <- roc(data.tr[data.index,1]~yHat[,1], data.tr[data.index,])
my.auc[iter,which(gamma==g),which(cost==c)] <- auc(roc)
}}
print(iter)
}
apply(my.auc,1,mean)
apply(my.auc,c(2,3),mean)
my.auc
install.packages("lattice")
library(lattice)
test <- apply(my.auc,c(2,3),mean)
levelplot(test)
# Initializing values
nIter <- 6
gamma <- 10^seq(-3,0,1)
cost <- 10^seq(-5,-1,1)
my.auc <- array(0, dim=c(nIter,length(gamma),length(cost)))
for(iter in 1:nIter){
# Initializing the cross validation
data.index <- sample(nrow(data.tr))[1:round(nrow(data.tr)/10)]
for(g in gamma) { for(c in cost) {
model  <- svm(y~., data=data.tr[-data.index,], gamma=g, cost=c, probability=TRUE)
yHat <- predict(model, data.tr[data.index,], probability=TRUE)
yHat <- attr(yHat, "probabilities")
roc <- roc(data.tr[data.index,1]~yHat[,1], data.tr[data.index,])
my.auc[iter,which(gamma==g),which(cost==c)] <- auc(roc)
}}
print(iter)
}
# Clearing memory, loading package, reading the data
rm(list=ls())
library(e1071)
library(pROC)
library(ggplot2)
library(lattice)
data.tr <- dget("0-training-data.r")
data.te <- dget("0-testing-data.r")
# Initializing values
nIter <- 6
gamma <- 10^seq(-3,0,1)
cost <- 10^seq(-5,-1,1)
my.auc <- array(0, dim=c(nIter,length(gamma),length(cost)))
for(iter in 1:nIter){
# Initializing the cross validation
data.index <- sample(nrow(data.tr))[1:round(nrow(data.tr)/10)]
for(g in gamma) { for(c in cost) {
model  <- svm(y~., data=data.tr[-data.index,], gamma=g, cost=c, probability=TRUE)
yHat <- predict(model, data.tr[data.index,], probability=TRUE)
yHat <- attr(yHat, "probabilities")
roc <- roc(data.tr[data.index,1]~yHat[,1], data.tr[data.index,])
my.auc[iter,which(gamma==g),which(cost==c)] <- auc(roc)
}}
print(iter)
}
levelplot(test)
test <- apply(my.auc,c(2,3),mean)
test
levelplot(test)
# Clearing memory, loading package, reading the data
rm(list=ls())
library(e1071)
library(pROC)
library(ggplot2)
library(lattice)
data.tr <- dget("0-training-data.r")
data.te <- dget("0-testing-data.r")
# Initializing values
nIter <- 6
gamma <- 10^seq(-6,0,1)
cost <- 10^seq(-9,0,1)
my.auc <- array(0, dim=c(nIter,length(gamma),length(cost)))
for(iter in 1:nIter){
# Initializing the cross validation
data.index <- sample(nrow(data.tr))[1:round(nrow(data.tr)/10)]
for(g in gamma) { for(c in cost) {
model  <- svm(y~., data=data.tr[-data.index,], gamma=g, cost=c, probability=TRUE)
yHat <- predict(model, data.tr[data.index,], probability=TRUE)
yHat <- attr(yHat, "probabilities")
roc <- roc(data.tr[data.index,1]~yHat[,1], data.tr[data.index,])
my.auc[iter,which(gamma==g),which(cost==c)] <- auc(roc)
}}
print(iter)
}
test <- apply(my.auc,c(2,3),mean)
levelplot(test)
test
# Initializing values
nIter <- 3
gamma <- 10^seq(-9,0,1)
cost <- 10^seq(-9,0,1)
my.auc <- array(0, dim=c(nIter,length(gamma),length(cost)))
# -------------------- Choosing gamma -------------------- #
for(iter in 1:nIter){
# Initializing the cross validation
data.index <- sample(nrow(data.tr))[1:round(nrow(data.tr)/10)]
for(g in gamma) { for(c in cost) {
model  <- svm(y~., data=data.tr[-data.index,], gamma=g, cost=c, probability=TRUE)
yHat <- predict(model, data.tr[data.index,], probability=TRUE)
yHat <- attr(yHat, "probabilities")
roc <- roc(data.tr[data.index,1]~yHat[,1], data.tr[data.index,])
my.auc[iter,which(gamma==g),which(cost==c)] <- auc(roc)
}}
print(iter)
}
test <- apply(my.auc,c(2,3),mean)
levelplot(test)
test
gamma
cost
model  <- svm(y~., data=data.tr, gamma=1e-05, cost=1e+00, probability=TRUE)
dput(model, "0-model-svm.R")
# Getting the prediction
yHat <- predict(model, data.tr[data.index,], probability=TRUE)
yHat <- predict(model, data.te, probability=TRUE)
yHat <- attr(yHat, "probabilities")
yHat
roc <- roc(data.te[,1]~yHat[,1], data.te, plot=T)
roc
yHat <- predict(model, data.te, probability=TRUE)
yHat <- attr(yHat, "probabilities")
# Computing the ROC and AUC
roc <- roc(data.te[,1]~yHat[,1], data.te, plot=T)
roc
model  <- svm(y~., data=data.tr, gamma=1e-05, cost=1e+00, probability=TRUE)
dput(model, "0-model-svm.R")
# Getting the prediction
yHat <- predict(model, data.te, probability=TRUE)
yHat <- attr(yHat, "probabilities")
# Computing the ROC and AUC
roc <- roc(data.te[,1]~yHat[,1], data.te, plot=T)
yHat <- predict(model, data.tr, probability=TRUE)
yHat <- attr(yHat, "probabilities")
# Computing the ROC and AUC
roc <- roc(data.tr[,1]~yHat[,1], data.te, plot=T)
roc
# Clearing memory, loading package, reading the data
rm(list=ls())
library(glmnet)
library(pROC)
library(ggplot2)
data.tr <- dget("0-training-data.r")
data.te <- dget("0-testing-data.r")
y.tr <- data.tr[,1]
x.tr <- data.matrix(data.tr[,-1])
y.te <- data.te[,1]
x.te <- data.matrix(data.te[,-1])
model <- glmnet(x=x.tr, y=y.tr, family = "binomial", alpha=0, lambda=0.2482957578)
yHat <- predict(model, newx=x.tr, type="response")
roc <- roc(data.tr[,1]~yHat, data.tr, plot=T)
roc
yHat <- predict(model, newx=x.te, type="response")
roc <- roc(data.te[,1]~yHat, data.te, plot=T)
# Clearing memory, loading package, reading the data
rm(list=ls())
library(e1071)
library(pROC)
library(ggplot2)
library(lattice)
data.tr <- dget("0-training-data.r")
data.te <- dget("0-testing-data.r")
# Initializing values
nIter <- 10
gamma <- 10^seq(-9,0,0.2)
cost <- 10^seq(-9,0,0.25)
my.auc <- array(0, dim=c(nIter,length(gamma),length(cost)))
# -------------------- Choosing gamma and cost -------------------- #
for(iter in 1:nIter){
# Initializing the cross validation
data.index <- sample(nrow(data.tr))[1:round(nrow(data.tr)/10)]
for(g in gamma) { for(c in cost) {
model  <- svm(y~., data=data.tr[-data.index,], gamma=g, cost=c, probability=TRUE)
yHat <- predict(model, data.tr[data.index,], probability=TRUE)
yHat <- attr(yHat, "probabilities")
roc <- roc(data.tr[data.index,1]~yHat[,1], data.tr[data.index,])
my.auc[iter,which(gamma==g),which(cost==c)] <- auc(roc)
}}
print(iter)
}
model  <- svm(y~., data=data.tr[-data.index,], gamma=g, cost=c, probability=TRUE)
yHat <- predict(model, data.tr[data.index,], probability=TRUE)
yHat <- attr(yHat, "probabilities")
roc <- roc(data.tr[data.index,1]~yHat[,1], data.tr[data.index,])
my.auc[iter,which(gamma==g),which(cost==c)] <- auc(roc)
auc(roc)
my.auc[iter,which(gamma==g),which(cost==c)] <- auc$roc
my.auc[iter,which(gamma==g),which(cost==c)] <- roc$auc
roc$auc
# Clearing memory, loading package, reading the data
rm(list=ls())
library(e1071)
library(pROC)
library(ggplot2)
library(lattice)
data.tr <- dget("0-training-data.r")
data.te <- dget("0-testing-data.r")
# Initializing values
nIter <- 10
gamma <- 10^seq(-9,0,0.2)
cost <- 10^seq(-9,0,0.25)
my.auc <- array(0, dim=c(nIter,length(gamma),length(cost)))
# -------------------- Choosing gamma and cost -------------------- #
for(iter in 1:nIter){
# Initializing the cross validation
data.index <- sample(nrow(data.tr))[1:round(nrow(data.tr)/10)]
for(g in gamma) { for(c in cost) {
model  <- svm(y~., data=data.tr[-data.index,], gamma=g, cost=c, probability=TRUE)
yHat <- predict(model, data.tr[data.index,], probability=TRUE)
yHat <- attr(yHat, "probabilities")
roc <- roc(data.tr[data.index,1]~yHat[,1], data.tr[data.index,])
my.auc[iter,which(gamma==g),which(cost==c)] <- roc$auc
}}
print(iter)
}
test <- apply(my.auc,c(2,3),mean)
levelplot(test)
gamma[30]
cost[25]
model  <- svm(y~., data=data.tr, gamma=0.0006309573, cost=0.001, probability=TRUE)
yHat <- predict(model, data.te, probability=TRUE)
yHat <- attr(yHat, "probabilities")
# Computing the ROC and AUC
roc <- roc(data.te[,1]~yHat[,1], data.te, plot=T)
roc
model  <- svm(y~., data=data.tr, gamma=0.0006309573, cost=1, probability=TRUE)
yHat <- predict(model, data.te, probability=TRUE)
yHat <- attr(yHat, "probabilities")
# Computing the ROC and AUC
roc <- roc(data.te[,1]~yHat[,1], data.te, plot=T)
roc
# Fitting the final model
model  <- svm(y~., data=data.tr, gamma=0.0006309573, cost=0.001, probability=TRUE)
dput(model, "0-model-svm.R")
# Getting the prediction
yHat <- predict(model, data.te, probability=TRUE)
yHat <- attr(yHat, "probabilities")
# Computing the ROC and AUC
roc <- roc(data.te[,1]~yHat[,1], data.te, plot=T)
roc
levelplot(test)
cost[40]
gamma[40]
gamma[38]
gamma[37]
gamma[36]
cost[37]
model  <- svm(y~., data=data.tr, gamma=0.01, cost=1, probability=TRUE)
dput(model, "0-model-svm.R")
# Getting the prediction
yHat <- predict(model, data.te, probability=TRUE)
yHat <- attr(yHat, "probabilities")
# Computing the ROC and AUC
roc <- roc(data.te[,1]~yHat[,1], data.te, plot=T)
roc
gamma[38]
model  <- svm(y~., data=data.tr, gamma=0.02511886, cost=1, probability=TRUE)
dput(model, "0-model-svm.R")
# Getting the prediction
yHat <- predict(model, data.te, probability=TRUE)
yHat <- attr(yHat, "probabilities")
# Computing the ROC and AUC
roc <- roc(data.te[,1]~yHat[,1], data.te, plot=T)
roc
gamma[3]
gamma[30]
gamma[32]
gamma[31]
model  <- svm(y~., data=data.tr, gamma=0.001, cost=1, probability=TRUE)
dput(model, "0-model-svm.R")
# Getting the prediction
yHat <- predict(model, data.te, probability=TRUE)
yHat <- attr(yHat, "probabilities")
# Computing the ROC and AUC
roc <- roc(data.te[,1]~yHat[,1], data.te, plot=T)
roc
model  <- svm(y~., data=data.tr, gamma=0.0001, cost=1, probability=TRUE)
dput(model, "0-model-svm.R")
# Getting the prediction
yHat <- predict(model, data.te, probability=TRUE)
yHat <- attr(yHat, "probabilities")
# Computing the ROC and AUC
roc <- roc(data.te[,1]~yHat[,1], data.te, plot=T)
roc
levelplot(test)
cost[37]
cost[37]
gamma[31]
gamma[39]
# Fitting the final model
model  <- svm(y~., data=data.tr, gamma=0.03981072, cost=1, probability=TRUE)
dput(model, "0-model-svm.R")
# Getting the prediction
yHat <- predict(model, data.te, probability=TRUE)
yHat <- attr(yHat, "probabilities")
# Computing the ROC and AUC
roc <- roc(data.te[,1]~yHat[,1], data.te, plot=T)
# Fitting the final model
model  <- svm(y~., data=data.tr, gamma=0.001, cost=1, probability=TRUE)
dput(model, "0-model-svm.R")
# Getting the prediction
yHat <- predict(model, data.te, probability=TRUE)
yHat <- attr(yHat, "probabilities")
# Computing the ROC and AUC
roc <- roc(data.te[,1]~yHat[,1], data.te, plot=T)
roc
# Fitting the final model
model  <- svm(y~., data=data.tr, gamma=0.0001, cost=1, probability=TRUE)
dput(model, "0-model-svm.R")
# Getting the prediction
yHat <- predict(model, data.te, probability=TRUE)
yHat <- attr(yHat, "probabilities")
# Computing the ROC and AUC
roc <- roc(data.te[,1]~yHat[,1], data.te, plot=T)
roc
which(gamma == 0.0001)
roc$acu
roc$auc
gamma
cost
model  <- svm(y~., data=data.tr, gamma=1.000000e-09, cost=1.000000e-09, probability=TRUE)
dput(model, "0-model-svm.R")
# Getting the prediction
yHat <- predict(model, data.te, probability=TRUE)
yHat <- attr(yHat, "probabilities")
# Computing the ROC and AUC
roc <- roc(data.te[,1]~yHat[,1], data.te, plot=T)
roc
